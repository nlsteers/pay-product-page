name: PR

on:
  pull_request:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Setup Ruby
        uses: ruby/setup-ruby@8df78e55761745aad83acaf3ff12976382356e6d
        with:
          ruby-version: '.ruby-version'
          bundler-cache: true
      - name: Setup Node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test
      - name: Get version from Package file
        id: get_package_version
        run: |
          echo "package_version=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
      - name: Get latest release version
        id: get_latest_release_version
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
              const getReleaseResp = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              })
              return getReleaseResp.data.name
            } catch(err) {
              if (err.name == 'HttpError') {
                console.warn("Found HttpError")
                if (err.status == 404)  {
                  console.error("Error 404: No previous GitHub Releases found. Defaulting to 0.0.0")
                  return "0.0.0"
                }
              } else {
                console.error(`Failed to get the latest release: ${err.message}`)
                throw err
              }
            }
      - name: test next-semver
        id: next_version
        uses: alphagov/pay-ci/actions/next-semver@pp-10667/semver-gha
        with:
          package_version: ${{ steps.get_package_version.outputs.package_version }}
          release_version: ${{ steps.get_latest_release_version.outputs.result }}
      - name: print next version
        run: echo "the next semver would be ${{ steps.next_version.outputs.version }}"
